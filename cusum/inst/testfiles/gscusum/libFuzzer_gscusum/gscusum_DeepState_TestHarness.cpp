// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// gscusum_DeepState_TestHarness_generation.cpp and gscusum_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix gscusum(NumericMatrix& input_outcomes, double failure_probability, double odds_multiplier, double limit, NumericVector& quantiles, int max_num_shuffles, int seed);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix input_outcomes  = RcppDeepState_NumericMatrix();
  std::string input_outcomes_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/gscusum/libFuzzer_gscusum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_input_outcomes.qs";
  qs::c_qsave(input_outcomes,input_outcomes_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "input_outcomes values: "<< input_outcomes << std::endl;
  NumericVector failure_probability(1);
  failure_probability[0]  = RcppDeepState_double();
  std::string failure_probability_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/gscusum/libFuzzer_gscusum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_failure_probability.qs";
  qs::c_qsave(failure_probability,failure_probability_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "failure_probability values: "<< failure_probability << std::endl;
  NumericVector odds_multiplier(1);
  odds_multiplier[0]  = RcppDeepState_double();
  std::string odds_multiplier_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/gscusum/libFuzzer_gscusum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_odds_multiplier.qs";
  qs::c_qsave(odds_multiplier,odds_multiplier_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "odds_multiplier values: "<< odds_multiplier << std::endl;
  NumericVector limit(1);
  limit[0]  = RcppDeepState_double();
  std::string limit_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/gscusum/libFuzzer_gscusum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_limit.qs";
  qs::c_qsave(limit,limit_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "limit values: "<< limit << std::endl;
  NumericVector quantiles  = RcppDeepState_NumericVector();
  std::string quantiles_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/gscusum/libFuzzer_gscusum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_quantiles.qs";
  qs::c_qsave(quantiles,quantiles_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "quantiles values: "<< quantiles << std::endl;
  IntegerVector max_num_shuffles(1);
  max_num_shuffles[0]  = RcppDeepState_int();
  std::string max_num_shuffles_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/gscusum/libFuzzer_gscusum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_max_num_shuffles.qs";
  qs::c_qsave(max_num_shuffles,max_num_shuffles_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max_num_shuffles values: "<< max_num_shuffles << std::endl;
  IntegerVector seed(1);
  seed[0]  = RcppDeepState_int();
  std::string seed_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/gscusum/libFuzzer_gscusum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_seed.qs";
  qs::c_qsave(seed,seed_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "seed values: "<< seed << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    gscusum(input_outcomes,failure_probability[0],odds_multiplier[0],limit[0],quantiles,max_num_shuffles[0],seed[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
