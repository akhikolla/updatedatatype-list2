// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// bhnoneq_LL_DeepState_TestHarness_generation.cpp and bhnoneq_LL_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double bhnoneq_LL(NumericVector stpar, NumericVector year, NumericVector Lbar, NumericVector ss, double Linf, double K, double Lc, int nbreaks);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector stpar  = RcppDeepState_NumericVector();
  std::string stpar_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/bhnoneq_LL/libFuzzer_bhnoneq_LL/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_stpar.qs";
  qs::c_qsave(stpar,stpar_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "stpar values: "<< stpar << std::endl;
  NumericVector year  = RcppDeepState_NumericVector();
  std::string year_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/bhnoneq_LL/libFuzzer_bhnoneq_LL/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_year.qs";
  qs::c_qsave(year,year_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "year values: "<< year << std::endl;
  NumericVector Lbar  = RcppDeepState_NumericVector();
  std::string Lbar_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/bhnoneq_LL/libFuzzer_bhnoneq_LL/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Lbar.qs";
  qs::c_qsave(Lbar,Lbar_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Lbar values: "<< Lbar << std::endl;
  NumericVector ss  = RcppDeepState_NumericVector();
  std::string ss_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/bhnoneq_LL/libFuzzer_bhnoneq_LL/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_ss.qs";
  qs::c_qsave(ss,ss_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ss values: "<< ss << std::endl;
  NumericVector Linf(1);
  Linf[0]  = RcppDeepState_double();
  std::string Linf_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/bhnoneq_LL/libFuzzer_bhnoneq_LL/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Linf.qs";
  qs::c_qsave(Linf,Linf_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Linf values: "<< Linf << std::endl;
  NumericVector K(1);
  K[0]  = RcppDeepState_double();
  std::string K_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/bhnoneq_LL/libFuzzer_bhnoneq_LL/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_K.qs";
  qs::c_qsave(K,K_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "K values: "<< K << std::endl;
  NumericVector Lc(1);
  Lc[0]  = RcppDeepState_double();
  std::string Lc_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/bhnoneq_LL/libFuzzer_bhnoneq_LL/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_Lc.qs";
  qs::c_qsave(Lc,Lc_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Lc values: "<< Lc << std::endl;
  IntegerVector nbreaks(1);
  nbreaks[0]  = RcppDeepState_int();
  std::string nbreaks_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/bhnoneq_LL/libFuzzer_bhnoneq_LL/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_nbreaks.qs";
  qs::c_qsave(nbreaks,nbreaks_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nbreaks values: "<< nbreaks << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    bhnoneq_LL(stpar,year,Lbar,ss,Linf[0],K[0],Lc[0],nbreaks[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
