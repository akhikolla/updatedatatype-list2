// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// phd_solver_DeepState_TestHarness_generation.cpp and phd_solver_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List phd_solver(arma::mat B, arma::mat& X, arma::mat& Y, double bw, double rho, double eta, double gamma, double tau, double epsilon, double btol, double ftol, double gtol, int maxitr, int verbose, int ncore);

TEST(,){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  std::ofstream B_stream;
  arma::mat B  = RcppDeepState_mat();
  B_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/orthoDr/inst/testfiles/phd_solver/inputs/B");
  B_stream << B;
  std::cout << "B values: "<< B << std::endl;
  B_stream.close();
  std::ofstream X_stream;
  arma::mat X  = RcppDeepState_mat();
  X_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/orthoDr/inst/testfiles/phd_solver/inputs/X");
  X_stream << X;
  std::cout << "X values: "<< X << std::endl;
  X_stream.close();
  std::ofstream Y_stream;
  arma::mat Y  = RcppDeepState_mat();
  Y_stream.open("/home/akhila/fuzzer_packages/fuzzedpackages/orthoDr/inst/testfiles/phd_solver/inputs/Y");
  Y_stream << Y;
  std::cout << "Y values: "<< Y << std::endl;
  Y_stream.close();
  NumericVector bw(1);
  bw[0]  = RcppDeepState_double();
  std::string bw_t = "/home/akhila/fuzzer_packages/fuzzedpackages/orthoDr/inst/testfiles/phd_solver/AFL_phd_solver/afl_inputs/" + std::to_string(t) + "_bw.qs";
  qs::c_qsave(bw,bw_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "bw values: "<< bw << std::endl;
  NumericVector rho(1);
  rho[0]  = RcppDeepState_double();
  std::string rho_t = "/home/akhila/fuzzer_packages/fuzzedpackages/orthoDr/inst/testfiles/phd_solver/AFL_phd_solver/afl_inputs/" + std::to_string(t) + "_rho.qs";
  qs::c_qsave(rho,rho_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rho values: "<< rho << std::endl;
  NumericVector eta(1);
  eta[0]  = RcppDeepState_double();
  std::string eta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/orthoDr/inst/testfiles/phd_solver/AFL_phd_solver/afl_inputs/" + std::to_string(t) + "_eta.qs";
  qs::c_qsave(eta,eta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "eta values: "<< eta << std::endl;
  NumericVector gamma(1);
  gamma[0]  = RcppDeepState_double();
  std::string gamma_t = "/home/akhila/fuzzer_packages/fuzzedpackages/orthoDr/inst/testfiles/phd_solver/AFL_phd_solver/afl_inputs/" + std::to_string(t) + "_gamma.qs";
  qs::c_qsave(gamma,gamma_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gamma values: "<< gamma << std::endl;
  NumericVector tau(1);
  tau[0]  = RcppDeepState_double();
  std::string tau_t = "/home/akhila/fuzzer_packages/fuzzedpackages/orthoDr/inst/testfiles/phd_solver/AFL_phd_solver/afl_inputs/" + std::to_string(t) + "_tau.qs";
  qs::c_qsave(tau,tau_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tau values: "<< tau << std::endl;
  NumericVector epsilon(1);
  epsilon[0]  = RcppDeepState_double();
  std::string epsilon_t = "/home/akhila/fuzzer_packages/fuzzedpackages/orthoDr/inst/testfiles/phd_solver/AFL_phd_solver/afl_inputs/" + std::to_string(t) + "_epsilon.qs";
  qs::c_qsave(epsilon,epsilon_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "epsilon values: "<< epsilon << std::endl;
  NumericVector btol(1);
  btol[0]  = RcppDeepState_double();
  std::string btol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/orthoDr/inst/testfiles/phd_solver/AFL_phd_solver/afl_inputs/" + std::to_string(t) + "_btol.qs";
  qs::c_qsave(btol,btol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "btol values: "<< btol << std::endl;
  NumericVector ftol(1);
  ftol[0]  = RcppDeepState_double();
  std::string ftol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/orthoDr/inst/testfiles/phd_solver/AFL_phd_solver/afl_inputs/" + std::to_string(t) + "_ftol.qs";
  qs::c_qsave(ftol,ftol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ftol values: "<< ftol << std::endl;
  NumericVector gtol(1);
  gtol[0]  = RcppDeepState_double();
  std::string gtol_t = "/home/akhila/fuzzer_packages/fuzzedpackages/orthoDr/inst/testfiles/phd_solver/AFL_phd_solver/afl_inputs/" + std::to_string(t) + "_gtol.qs";
  qs::c_qsave(gtol,gtol_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "gtol values: "<< gtol << std::endl;
  IntegerVector maxitr(1);
  maxitr[0]  = RcppDeepState_int();
  std::string maxitr_t = "/home/akhila/fuzzer_packages/fuzzedpackages/orthoDr/inst/testfiles/phd_solver/AFL_phd_solver/afl_inputs/" + std::to_string(t) + "_maxitr.qs";
  qs::c_qsave(maxitr,maxitr_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "maxitr values: "<< maxitr << std::endl;
  IntegerVector verbose(1);
  verbose[0]  = RcppDeepState_int();
  std::string verbose_t = "/home/akhila/fuzzer_packages/fuzzedpackages/orthoDr/inst/testfiles/phd_solver/AFL_phd_solver/afl_inputs/" + std::to_string(t) + "_verbose.qs";
  qs::c_qsave(verbose,verbose_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "verbose values: "<< verbose << std::endl;
  IntegerVector ncore(1);
  ncore[0]  = RcppDeepState_int();
  std::string ncore_t = "/home/akhila/fuzzer_packages/fuzzedpackages/orthoDr/inst/testfiles/phd_solver/AFL_phd_solver/afl_inputs/" + std::to_string(t) + "_ncore.qs";
  qs::c_qsave(ncore,ncore_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "ncore values: "<< ncore << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    phd_solver(B,X,Y,bw[0],rho[0],eta[0],gamma[0],tau[0],epsilon[0],btol[0],ftol[0],gtol[0],maxitr[0],verbose[0],ncore[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
