// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// pggg_palive_DeepState_TestHarness_generation.cpp and pggg_palive_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector pggg_palive(NumericVector x, NumericVector tx, NumericVector Tcal, NumericVector k, NumericVector lambda, NumericVector mu);

TEST(,){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector x  = RcppDeepState_NumericVector();
  std::string x_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BTYDplus/inst/testfiles/pggg_palive/AFL_pggg_palive/afl_inputs/" + std::to_string(t) + "_x.qs";
  qs::c_qsave(x,x_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "x values: "<< x << std::endl;
  NumericVector tx  = RcppDeepState_NumericVector();
  std::string tx_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BTYDplus/inst/testfiles/pggg_palive/AFL_pggg_palive/afl_inputs/" + std::to_string(t) + "_tx.qs";
  qs::c_qsave(tx,tx_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "tx values: "<< tx << std::endl;
  NumericVector Tcal  = RcppDeepState_NumericVector();
  std::string Tcal_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BTYDplus/inst/testfiles/pggg_palive/AFL_pggg_palive/afl_inputs/" + std::to_string(t) + "_Tcal.qs";
  qs::c_qsave(Tcal,Tcal_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Tcal values: "<< Tcal << std::endl;
  NumericVector k  = RcppDeepState_NumericVector();
  std::string k_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BTYDplus/inst/testfiles/pggg_palive/AFL_pggg_palive/afl_inputs/" + std::to_string(t) + "_k.qs";
  qs::c_qsave(k,k_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "k values: "<< k << std::endl;
  NumericVector lambda  = RcppDeepState_NumericVector();
  std::string lambda_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BTYDplus/inst/testfiles/pggg_palive/AFL_pggg_palive/afl_inputs/" + std::to_string(t) + "_lambda.qs";
  qs::c_qsave(lambda,lambda_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "lambda values: "<< lambda << std::endl;
  NumericVector mu  = RcppDeepState_NumericVector();
  std::string mu_t = "/home/akhila/fuzzer_packages/fuzzedpackages/BTYDplus/inst/testfiles/pggg_palive/AFL_pggg_palive/afl_inputs/" + std::to_string(t) + "_mu.qs";
  qs::c_qsave(mu,mu_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "mu values: "<< mu << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    pggg_palive(x,tx,Tcal,k,lambda,mu);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
