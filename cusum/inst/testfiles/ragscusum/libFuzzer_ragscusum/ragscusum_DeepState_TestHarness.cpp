// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// ragscusum_DeepState_TestHarness_generation.cpp and ragscusum_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix ragscusum(NumericMatrix& input_ra_outcomes, double limit, NumericVector& quantiles, int max_num_shuffles, int seed);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix input_ra_outcomes  = RcppDeepState_NumericMatrix();
  std::string input_ra_outcomes_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/ragscusum/libFuzzer_ragscusum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_input_ra_outcomes.qs";
  qs::c_qsave(input_ra_outcomes,input_ra_outcomes_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "input_ra_outcomes values: "<< input_ra_outcomes << std::endl;
  NumericVector limit(1);
  limit[0]  = RcppDeepState_double();
  std::string limit_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/ragscusum/libFuzzer_ragscusum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_limit.qs";
  qs::c_qsave(limit,limit_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "limit values: "<< limit << std::endl;
  NumericVector quantiles  = RcppDeepState_NumericVector();
  std::string quantiles_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/ragscusum/libFuzzer_ragscusum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_quantiles.qs";
  qs::c_qsave(quantiles,quantiles_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "quantiles values: "<< quantiles << std::endl;
  IntegerVector max_num_shuffles(1);
  max_num_shuffles[0]  = RcppDeepState_int();
  std::string max_num_shuffles_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/ragscusum/libFuzzer_ragscusum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_max_num_shuffles.qs";
  qs::c_qsave(max_num_shuffles,max_num_shuffles_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max_num_shuffles values: "<< max_num_shuffles << std::endl;
  IntegerVector seed(1);
  seed[0]  = RcppDeepState_int();
  std::string seed_t = "/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/ragscusum/libFuzzer_ragscusum/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_seed.qs";
  qs::c_qsave(seed,seed_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "seed values: "<< seed << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    ragscusum(input_ra_outcomes,limit[0],quantiles,max_num_shuffles[0],seed[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
