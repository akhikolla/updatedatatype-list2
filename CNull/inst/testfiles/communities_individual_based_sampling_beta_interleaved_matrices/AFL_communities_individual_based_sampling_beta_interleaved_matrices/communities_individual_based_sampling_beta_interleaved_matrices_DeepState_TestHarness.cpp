// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// communities_individual_based_sampling_beta_interleaved_matrices_DeepState_TestHarness_generation.cpp and communities_individual_based_sampling_beta_interleaved_matrices_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix communities_individual_based_sampling_beta_interleaved_matrices(NumericMatrix in_m, int repetitions);

TEST(,){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericMatrix in_m  = RcppDeepState_NumericMatrix();
  std::string in_m_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CNull/inst/testfiles/communities_individual_based_sampling_beta_interleaved_matrices/AFL_communities_individual_based_sampling_beta_interleaved_matrices/afl_inputs/" + std::to_string(t) + "_in_m.qs";
  qs::c_qsave(in_m,in_m_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "in_m values: "<< in_m << std::endl;
  IntegerVector repetitions(1);
  repetitions[0]  = RcppDeepState_int();
  std::string repetitions_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CNull/inst/testfiles/communities_individual_based_sampling_beta_interleaved_matrices/AFL_communities_individual_based_sampling_beta_interleaved_matrices/afl_inputs/" + std::to_string(t) + "_repetitions.qs";
  qs::c_qsave(repetitions,repetitions_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "repetitions values: "<< repetitions << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    communities_individual_based_sampling_beta_interleaved_matrices(in_m,repetitions[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
