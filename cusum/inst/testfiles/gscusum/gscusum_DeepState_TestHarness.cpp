// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// gscusum_DeepState_TestHarness_generation.cpp and gscusum_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericMatrix gscusum(NumericMatrix& input_outcomes, double failure_probability, double odds_multiplier, double limit, NumericVector& quantiles, int max_num_shuffles, int seed);

TEST(,){
  RInside R;
  std::cout << "input starts" << std::endl;
  NumericMatrix input_outcomes  = RcppDeepState_NumericMatrix();
  qs::c_qsave(input_outcomes,"/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/gscusum/inputs/input_outcomes.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "input_outcomes values: "<< input_outcomes << std::endl;
  NumericVector failure_probability(1);
  failure_probability[0]  = RcppDeepState_double();
  qs::c_qsave(failure_probability,"/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/gscusum/inputs/failure_probability.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "failure_probability values: "<< failure_probability << std::endl;
  NumericVector odds_multiplier(1);
  odds_multiplier[0]  = RcppDeepState_double();
  qs::c_qsave(odds_multiplier,"/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/gscusum/inputs/odds_multiplier.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "odds_multiplier values: "<< odds_multiplier << std::endl;
  NumericVector limit(1);
  limit[0]  = RcppDeepState_double();
  qs::c_qsave(limit,"/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/gscusum/inputs/limit.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "limit values: "<< limit << std::endl;
  NumericVector quantiles  = RcppDeepState_NumericVector();
  qs::c_qsave(quantiles,"/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/gscusum/inputs/quantiles.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "quantiles values: "<< quantiles << std::endl;
  IntegerVector max_num_shuffles(1);
  max_num_shuffles[0]  = RcppDeepState_int();
  qs::c_qsave(max_num_shuffles,"/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/gscusum/inputs/max_num_shuffles.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "max_num_shuffles values: "<< max_num_shuffles << std::endl;
  IntegerVector seed(1);
  seed[0]  = RcppDeepState_int();
  qs::c_qsave(seed,"/home/akhila/fuzzer_packages/fuzzedpackages/cusum/inst/testfiles/gscusum/inputs/seed.qs",
		"high", "zstd", 1, 15, true, 1);
  std::cout << "seed values: "<< seed << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    gscusum(input_outcomes,failure_probability[0],odds_multiplier[0],limit[0],quantiles,max_num_shuffles[0],seed[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
