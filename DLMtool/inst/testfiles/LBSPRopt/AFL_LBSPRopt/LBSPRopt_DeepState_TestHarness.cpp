// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// LBSPRopt_DeepState_TestHarness_generation.cpp and LBSPRopt_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

double LBSPRopt(NumericVector pars, NumericVector CAL, int nage, int nlen, double CVLinf, NumericVector LenBins, NumericVector LenMids, double MK, double Linf, NumericVector rLens, NumericMatrix Prob, NumericVector Ml, double L50, double L95, double Beta);

TEST(,){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector pars  = RcppDeepState_NumericVector();
  std::string pars_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/LBSPRopt/AFL_LBSPRopt/afl_inputs/" + std::to_string(t) + "_pars.qs";
  qs::c_qsave(pars,pars_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "pars values: "<< pars << std::endl;
  NumericVector CAL  = RcppDeepState_NumericVector();
  std::string CAL_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/LBSPRopt/AFL_LBSPRopt/afl_inputs/" + std::to_string(t) + "_CAL.qs";
  qs::c_qsave(CAL,CAL_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "CAL values: "<< CAL << std::endl;
  IntegerVector nage(1);
  nage[0]  = RcppDeepState_int();
  std::string nage_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/LBSPRopt/AFL_LBSPRopt/afl_inputs/" + std::to_string(t) + "_nage.qs";
  qs::c_qsave(nage,nage_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nage values: "<< nage << std::endl;
  IntegerVector nlen(1);
  nlen[0]  = RcppDeepState_int();
  std::string nlen_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/LBSPRopt/AFL_LBSPRopt/afl_inputs/" + std::to_string(t) + "_nlen.qs";
  qs::c_qsave(nlen,nlen_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "nlen values: "<< nlen << std::endl;
  NumericVector CVLinf(1);
  CVLinf[0]  = RcppDeepState_double();
  std::string CVLinf_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/LBSPRopt/AFL_LBSPRopt/afl_inputs/" + std::to_string(t) + "_CVLinf.qs";
  qs::c_qsave(CVLinf,CVLinf_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "CVLinf values: "<< CVLinf << std::endl;
  NumericVector LenBins  = RcppDeepState_NumericVector();
  std::string LenBins_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/LBSPRopt/AFL_LBSPRopt/afl_inputs/" + std::to_string(t) + "_LenBins.qs";
  qs::c_qsave(LenBins,LenBins_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "LenBins values: "<< LenBins << std::endl;
  NumericVector LenMids  = RcppDeepState_NumericVector();
  std::string LenMids_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/LBSPRopt/AFL_LBSPRopt/afl_inputs/" + std::to_string(t) + "_LenMids.qs";
  qs::c_qsave(LenMids,LenMids_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "LenMids values: "<< LenMids << std::endl;
  NumericVector MK(1);
  MK[0]  = RcppDeepState_double();
  std::string MK_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/LBSPRopt/AFL_LBSPRopt/afl_inputs/" + std::to_string(t) + "_MK.qs";
  qs::c_qsave(MK,MK_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "MK values: "<< MK << std::endl;
  NumericVector Linf(1);
  Linf[0]  = RcppDeepState_double();
  std::string Linf_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/LBSPRopt/AFL_LBSPRopt/afl_inputs/" + std::to_string(t) + "_Linf.qs";
  qs::c_qsave(Linf,Linf_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Linf values: "<< Linf << std::endl;
  NumericVector rLens  = RcppDeepState_NumericVector();
  std::string rLens_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/LBSPRopt/AFL_LBSPRopt/afl_inputs/" + std::to_string(t) + "_rLens.qs";
  qs::c_qsave(rLens,rLens_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "rLens values: "<< rLens << std::endl;
  NumericMatrix Prob  = RcppDeepState_NumericMatrix();
  std::string Prob_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/LBSPRopt/AFL_LBSPRopt/afl_inputs/" + std::to_string(t) + "_Prob.qs";
  qs::c_qsave(Prob,Prob_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Prob values: "<< Prob << std::endl;
  NumericVector Ml  = RcppDeepState_NumericVector();
  std::string Ml_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/LBSPRopt/AFL_LBSPRopt/afl_inputs/" + std::to_string(t) + "_Ml.qs";
  qs::c_qsave(Ml,Ml_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Ml values: "<< Ml << std::endl;
  NumericVector L50(1);
  L50[0]  = RcppDeepState_double();
  std::string L50_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/LBSPRopt/AFL_LBSPRopt/afl_inputs/" + std::to_string(t) + "_L50.qs";
  qs::c_qsave(L50,L50_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "L50 values: "<< L50 << std::endl;
  NumericVector L95(1);
  L95[0]  = RcppDeepState_double();
  std::string L95_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/LBSPRopt/AFL_LBSPRopt/afl_inputs/" + std::to_string(t) + "_L95.qs";
  qs::c_qsave(L95,L95_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "L95 values: "<< L95 << std::endl;
  NumericVector Beta(1);
  Beta[0]  = RcppDeepState_double();
  std::string Beta_t = "/home/akhila/fuzzer_packages/fuzzedpackages/DLMtool/inst/testfiles/LBSPRopt/AFL_LBSPRopt/afl_inputs/" + std::to_string(t) + "_Beta.qs";
  qs::c_qsave(Beta,Beta_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "Beta values: "<< Beta << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    LBSPRopt(pars,CAL,nage[0],nlen[0],CVLinf[0],LenBins,LenMids,MK[0],Linf[0],rLens,Prob,Ml,L50[0],L95[0],Beta[0]);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
