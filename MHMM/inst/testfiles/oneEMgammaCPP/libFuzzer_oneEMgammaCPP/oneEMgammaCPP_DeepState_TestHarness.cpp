// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// oneEMgammaCPP_DeepState_TestHarness_generation.cpp and oneEMgammaCPP_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

List oneEMgammaCPP(const NumericVector& my_xs, const NumericVector& my_ws, const int g, const NumericVector& val);

TEST(,){
  static int rinside_flag = 0;
  if(rinside_flag == 0)
  {
    rinside_flag = 1;
    RInside R;
  } std::time_t current_timestamp = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector my_xs  = RcppDeepState_NumericVector();
  std::string my_xs_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MHMM/inst/testfiles/oneEMgammaCPP/libFuzzer_oneEMgammaCPP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_my_xs.qs";
  qs::c_qsave(my_xs,my_xs_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "my_xs values: "<< my_xs << std::endl;
  NumericVector my_ws  = RcppDeepState_NumericVector();
  std::string my_ws_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MHMM/inst/testfiles/oneEMgammaCPP/libFuzzer_oneEMgammaCPP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_my_ws.qs";
  qs::c_qsave(my_ws,my_ws_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "my_ws values: "<< my_ws << std::endl;
  IntegerVector g(1);
  g[0]  = RcppDeepState_int();
  std::string g_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MHMM/inst/testfiles/oneEMgammaCPP/libFuzzer_oneEMgammaCPP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_g.qs";
  qs::c_qsave(g,g_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "g values: "<< g << std::endl;
  NumericVector val  = RcppDeepState_NumericVector();
  std::string val_t = "/home/akhila/fuzzer_packages/fuzzedpackages/MHMM/inst/testfiles/oneEMgammaCPP/libFuzzer_oneEMgammaCPP/libfuzzer_inputs/" + std::to_string(current_timestamp) +
          "_val.qs";
  qs::c_qsave(val,val_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "val values: "<< val << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    oneEMgammaCPP(my_xs,my_ws,g[0],val);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
