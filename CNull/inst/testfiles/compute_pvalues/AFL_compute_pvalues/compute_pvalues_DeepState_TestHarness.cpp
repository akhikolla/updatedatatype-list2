// AUTOMATICALLY GENERATED BY RCPPDEEPSTATE PLEASE DO NOT EDIT BY HAND, INSTEAD EDIT
// compute_pvalues_DeepState_TestHarness_generation.cpp and compute_pvalues_DeepState_TestHarness_checks.cpp

#include <fstream>
#include <ctime>
#include <RInside.h>
#include <iostream>
#include <RcppDeepState.h>
#include <qs.h>
#include <DeepState.hpp>

NumericVector compute_pvalues(NumericVector original_vals, NumericVector randomised_vals);

TEST(,){
  RInside R;
  std::time_t t = std::time(0);
  std::cout << "input starts" << std::endl;
  NumericVector original_vals  = RcppDeepState_NumericVector();
  std::string original_vals_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CNull/inst/testfiles/compute_pvalues/AFL_compute_pvalues/afl_inputs/" + std::to_string(t) + "_original_vals.qs";
  qs::c_qsave(original_vals,original_vals_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "original_vals values: "<< original_vals << std::endl;
  NumericVector randomised_vals  = RcppDeepState_NumericVector();
  std::string randomised_vals_t = "/home/akhila/fuzzer_packages/fuzzedpackages/CNull/inst/testfiles/compute_pvalues/AFL_compute_pvalues/afl_inputs/" + std::to_string(t) + "_randomised_vals.qs";
  qs::c_qsave(randomised_vals,randomised_vals_t,
		"high", "zstd", 1, 15, true, 1);
  std::cout << "randomised_vals values: "<< randomised_vals << std::endl;
  std::cout << "input ends" << std::endl;
  try{
    compute_pvalues(original_vals,randomised_vals);
  }
  catch(Rcpp::exception& e){
    std::cout<<"Exception Handled"<<std::endl;
  }
}
